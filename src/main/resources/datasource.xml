<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <!-- 定义受环境影响易变的变量 -->
    <!-- 
    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
                <value>classpath:config.properties</value>
                <value>classpath:redis.properties</value>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>
     -->

    <!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

    <!-- master数据源 -->
    <bean id="masterDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${datasource.master.driverClassName}"/>
        <property name="url" value="${datasource.master.url}"/>
        <property name="username" value="${datasource.master.username}"/>
        <property name="password" value="${datasource.master.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${datasource.master.initialSize}"/>
        <!-- 连接池的最大值 -->
        <property name="maxTotal" value="${datasource.master.maxTotal}"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${datasource.master.maxIdle}"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${datasource.master.minIdle}"/>
        <!--#给出一条简单的sql语句进行验证 -->
        <property name="validationQuery" value="${datasource.master.validationQuery}"/>
        <property name="testOnBorrow" value="${datasource.master.testOnBorrow}"/>
        <property name="testWhileIdle" value="${datasource.master.testWhileIdle}"/>
        <!--#在取出连接时进行有效验证 -->
        <property name="removeAbandonedOnBorrow" value="${datasource.master.removeAbandonedOnBorrow}"/>
        <property name="removeAbandonedTimeout" value="${datasource.master.removeAbandonedTimeout}"/>
        <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.master.timeBetweenEvictionRunsMillis}"/>
    </bean>

    <!-- slave数据源 -->
    <bean id="slaveDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${datasource.slave.driverClassName}"/>
        <property name="url" value="${datasource.slave.url}"/>
        <property name="username" value="${datasource.slave.username}"/>
        <property name="password" value="${datasource.slave.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${datasource.slave.initialSize}"/>
        <!-- 连接池的最大值 -->
        <property name="maxTotal" value="${datasource.slave.maxTotal}"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${datasource.slave.maxIdle}"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${datasource.slave.minIdle}"/>
        <!--#给出一条简单的sql语句进行验证 -->
        <property name="validationQuery" value="${datasource.slave.validationQuery}"/>
        <property name="testOnBorrow" value="${datasource.slave.testOnBorrow}"/>
        <property name="testWhileIdle" value="${datasource.slave.testWhileIdle}"/>
        <!--#在取出连接时进行有效验证 -->
        <property name="removeAbandonedOnBorrow" value="${datasource.slave.removeAbandonedOnBorrow}"/>
        <property name="removeAbandonedTimeout" value="${datasource.slave.removeAbandonedTimeout}"/>
        <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.slave.timeBetweenEvictionRunsMillis}"/>
    </bean>

    <!-- 动态数据源 -->
    <bean id="dataSource" class="com.pulin.dubboserver.common.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- write -->
                <entry key="master" value-ref="masterDataSource"/>
                <!-- read -->
                <entry key="slave" value-ref="slaveDataSource"/>
            </map>
        </property>
        <!-- 默认的数据源 -->
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>

    <bean id="aspectBean" class="com.pulin.dubboserver.common.DynamicDataSourceAspect"></bean>

    <aop:config>
        <aop:aspect id="dataSourceAspect" ref="aspectBean">

            <aop:before method="beforeService"
                        pointcut="execution(* com.pulin.*.service.*.*(..))"/>
            <aop:before method="beforeService"
                        pointcut="execution(* com.pulin.*.dao.*.*(..))"/>
            <aop:before method="setMasterDataSource"
                        pointcut="execution(* org.springframework.jdbc.core.JdbcTemplate.update*(..)) || execution(* org.springframework.jdbc.core.JdbcTemplate.batchUpdate(..)) || execution(* org.springframework.jdbc.core.JdbcTemplate.execute(..))"/>
            <aop:before method="setSlaveDataSource"
                        pointcut="execution(* org.springframework.jdbc.core.JdbcTemplate.query*(..))"/>
        </aop:aspect>
    </aop:config>

    <!-- jdbc注入 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>



    <!-- 事务管理器配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- jedis pool config start -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大连接数 -->
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <!--最大空闲连接数 -->
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <!--初始化连接数 -->
        <property name="minIdle" value="${redis.pool.minIdle}"/>
        <!--最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <!--对拿到的connection进行validateObject校验 -->
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
        <!--在进行returnObject对返回的connection进行validateObject校验 -->
        <!-- <property name="testOnReturn" value="${redis.pool.testOnReturn}" /> -->
        <!--定时对线程池中空闲的链接进行validateObject校验 -->
        <!-- <property name="testWhileIdle" value="true" /> -->
    </bean>

<!--     <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.master.urls}"/>
        <constructor-arg index="2" value="${redis.master.timeout}"/>
    </bean>

    <bean id="jedisClient" class="com.pulin.dubboserver.common.redis.JedisClient">
        <property name="jedisPool" ref="jedisPool"></property>
    </bean> -->


</beans>